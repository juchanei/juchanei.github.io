1:HL["/_next/static/css/d32bf43455ded298.css",{"as":"style"}]
0:[[["",{"children":["articles",{"children":[["slug","Sagas","d"],{"children":["__PAGE__?{\"slug\":\"Sagas\"}",{}]}]}]},"$undefined","$undefined",true],"$L2",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d32bf43455ded298.css","precedence":"next"}]],["$L3",null]]]]
4:HL["/_next/static/css/e175a87955b7f53c.css",{"as":"style"}]
5:I{"id":"7951","chunks":["414:static/chunks/414-1f2b980871695451.js","185:static/chunks/app/layout-a1437d56a8d70c68.js"],"name":"","async":false}
6:I{"id":"414","chunks":["414:static/chunks/414-1f2b980871695451.js","222:static/chunks/app/articles/page-396ceb5d519c38af.js"],"name":"","async":false}
7:I{"id":"9544","chunks":["272:static/chunks/webpack-df73c3a7ea0771f4.js","667:static/chunks/2443530c-82eff788789df68b.js","139:static/chunks/139-0eb3f6144d0a8a28.js"],"name":"","async":false}
8:I{"id":"99","chunks":["272:static/chunks/webpack-df73c3a7ea0771f4.js","667:static/chunks/2443530c-82eff788789df68b.js","139:static/chunks/139-0eb3f6144d0a8a28.js"],"name":"","async":false}
9:I{"id":"8607","chunks":["943:static/chunks/943-e365b4e8cd375ef4.js","83:static/chunks/app/articles/[slug]/page-4dc4cd3d17050a2d.js"],"name":"","async":false}
2:[["$","html",null,{"lang":"ko","children":[["$","head",null,{"children":[["$","title",null,{"children":"juchanei"}],["$","meta",null,{"name":"description","content":"$undefined"}],["$","meta",null,{"property":"og:site_name","content":"juchanei"}],["$","meta",null,{"property":"og:type","content":"blog"}],["$","meta",null,{"property":"og:title","content":"juchanei"}],["$","meta",null,{"property":"og:image","content":"/logo_transparent.png"}],["$","meta",null,{"property":"og:url","content":"https://juchanei.github.io"}],["$","meta",null,{"property":"og:description","content":"$undefined"}],["$","meta",null,{"property":"og:locale","content":"ko_KR"}],["$","meta",null,{"name":"twitter:card","content":"summary"}],["$","meta",null,{"name":"twitter:title","content":"juchanei"}],["$","meta",null,{"name":"twitter:description","content":"$undefined"}],["$","meta",null,{"name":"twitter:image","content":"/logo_transparent.png"}],["$","meta",null,{"name":"google-site-verification","content":"zMe30NikxkVrHQc8KL1LeFDlYRx13BypWzaXpglLe3Q"}],["$","link",null,{"rel":"stylesheet","href":"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/atom-one-light.min.css"}],["$","link",null,{"rel":"stylesheet","href":"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/atom-one-dark.min.css","media":"screen and (prefers-color-scheme: dark)"}]]}],["$","$L5",null,{"src":"https://www.googletagmanager.com/gtag/js?id=G-JRWY82TBQY","strategy":"afterInteractive"}],["$","$L5",null,{"id":"google-analytics","strategy":"afterInteractive","children":"\n                window.dataLayer = window.dataLayer || [];\n                function gtag(){window.dataLayer.push(arguments);}\n                gtag('js', new Date());\n\n                gtag('config', 'G-JRWY82TBQY');\n                "}],["$","body",null,{"children":["$","main",null,{"className":"Layout_main__maYPe","children":[["$","header",null,{"children":[["$","$L6",null,{"className":"Layout_logo__tEsDc","href":"/","children":"juchanei"}],["$","nav",null,{"children":["$","ul",null,{"children":[["$","li","/about",{"children":["$","$L6",null,{"href":"/about","target":"$undefined","children":"about"}]}],["$","li","/articles",{"children":["$","$L6",null,{"href":"/articles","target":"$undefined","children":"articles"}]}],["$","li","https://github.com/juchanei",{"children":["$","$L6",null,{"href":"https://github.com/juchanei","target":"blank","children":"github"}]}]]}]}]]}],["$","article",null,{"children":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L8",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":"$undefined","childProp":{"current":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","articles","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L8",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":"$undefined","childProp":{"current":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","articles","children",["slug","Sagas","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L8",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":"$undefined","childProp":{"current":[["$","$L9",null,{"title":"Sagas","date":"$D2022-11-22T15:55:00.000Z","tags":["saga","microservice","transaction","message","event"],"html":"<blockquote>\n<p><a href=\"https://microservices.io/patterns/data/saga.html\">https://microservices.io/patterns/data/saga.html</a> 을 번역한 글입니다.</p>\n</blockquote>\n<h2 id=\"context\">Context</h2>\n<p>당신은 <a href=\"https://microservices.io/patterns/data/database-per-service.html\">Database per Service</a> 패턴을 적용했다. 각각 의 서비스는 자신만의 데이터베이스를 가지고 있다. 그런데, 한 비즈니스 트랜잭션이 여러 서비스에 걸쳐 존재하고 당신은 이를 구현하기 위한 메커니즘이 필요하다. 예를 들어, 구매자에게 신용한도가 있는 e-커머스 스토어를 만든다고 해보자. Order 서비스와 Customer 서비스는 각각의 데이터베이스를 가지고 있어 로컬 ACID 트랜잭션을 쓸 수 없는 상태이다.</p>\n<h2 id=\"problem\">Problem</h2>\n<p>어떻게 하면 여러 서비스에 걸쳐 트랜잭션을 구현할 수 있을까?</p>\n<h2 id=\"forces\">Forces</h2>\n<ul>\n<li>2PC (2 Phase Commit)은 사용하지 않는다.</li>\n</ul>\n<h2 id=\"solution\">Solution</h2>\n<p>여러 서비스에 걸친 비즈니스 트랜잭션은 saga로 구현한다. Saga는 연속된 로컬 트랜잭션이다. 각각의 로컬 트랜잭션은 데이터베이스를 업데이트하고 메시지나 이벤트를 발행해 saga 다음 트랜잭션을 트리거한다. 만약 비즈니스 규칙을 위반하여 로컬 트랜잭션이 실패하면 saga는 이전 트랜잭션으로 인한 변화를 되돌리기 위해 보상 트랜잭션들을 실행한다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/10704195/203361071-e470cbd0-840e-4d89-b7aa-392a917c9c29.png\" alt=\"image\"></p>\n<p>여기에 saga를 조정(coordination)하는 두 방식이 있다.</p>\n<ul>\n<li>Choreography - 각각의 로컬 트랜잭션이 다른 서비스의 로컬 트랜잭션을 트리거 하는 도메인 이벤트를 발행한다.</li>\n<li>Orchestration - 오케스트레이터가 다른 서비스들에게 로컬 트랜잭션을 실행하도록 지시한다.</li>\n</ul>\n<h2 id=\"example-choreography-based-saga\">Example: Choreography-based saga</h2>\n<p><img src=\"https://user-images.githubusercontent.com/10704195/203361160-6d81af0f-c692-43e6-8f11-a53c29404164.png\" alt=\"image\"></p>\n<p>e-커머스 어플리케이션이 choreography 기반의 saga를 사용하여 ‘주문’을 생성하려고 한다면, 아래 단계를 따른다.</p>\n<ol>\n<li><code>Order</code> 서비스는 <code>POST /orders</code> 요청을 받고 <code>Order</code>를 <code>PENDING</code> 상태로 생성한다.</li>\n<li><code>Order Created</code> 이벤트를 발행한다.</li>\n<li><code>Customer</code> 서비스의 이벤트 핸들러가 이를 받아 ‘신용’을 확보한다.</li>\n<li>위 결과를 의미하는 이벤트를 발행한다.</li>\n<li><code>Order</code> 서비스의 이벤트 핸들러가 <code>Order</code>를 승인하거나 거절한다.</li>\n</ol>\n<h2 id=\"example-orchestration-based-saga\">Example: Orchestration-based saga</h2>\n<p><img src=\"https://user-images.githubusercontent.com/10704195/203361191-38660bcb-38c5-4de0-a6f7-4b1ac500c21f.png\" alt=\"image\"></p>\n<p>e-커머스 어플리케이션이 orchestration 기반의 saga를 사용하여 ‘주문’을 생성하려고 한다면, 아래 단계를 따른다.</p>\n<ol>\n<li><code>Order</code> 서비스가 <code>POST /orders</code> 요청을 받고 <code>Create Order</code> saga 오케스트레이터를 생성한다.</li>\n<li>saga 오케스트레이터는 <code>Order</code>를 <code>PENDING</code> 상태로 생성한다.</li>\n<li>그리고 <code>Reserve Credit</code> 명령(command)를 <code>Customer</code> 서비스로 보낸다.</li>\n<li><code>Customer</code> 서비스는 ‘신용’을 확보한다.</li>\n<li><code>Customer</code> 서비스는 결과를 saga 오케스트레이터에게 보낸다.</li>\n<li>saga 오케스트레이터는 <code>Order</code>를 승인하거나 거절한다.</li>\n</ol>\n<h2 id=\"resulting-context\">Resulting context</h2>\n<p>이 패턴은 다음과 같은 장점이 있다.</p>\n<ul>\n<li>분산 트랜잭션 없이 여러 서비스에 걸쳐 데이터 일관성을 유지할 수 있도록 한다.</li>\n</ul>\n<p>이  패턴은 다음과 같은 단점이 있다.</p>\n<ul>\n<li>프로그래밍 모델이 복잡하다. 예를 들어, 개발자는 앞선 변화를 되돌릴 수 있도록 반드시 보상 트랜잭션을 설계해야 한다.</li>\n</ul>\n<p>이 패턴은 또한 아래 대처해야 할 이슈가 있다.</p>\n<ul>\n<li>신뢰성을 위해 서비스는 반드시 원자적으로 데이터베이스를 업데이트 한 후 메시지/이벤트를 발행해야 한다. 이때 데이터베이스와 메시지 브로커에 걸친 분산 트랜잭션 메커니즘은 사용할 수 없다. 대신, 다음에 소개 될 아래 패턴 중 하나를 사용해야 한다.</li>\n<li>클라이언트는 동기적인 요청(e.g. HTTP <code>POST /orders</code>)을 통해 saga를 동작 시키고, 그 결과를 비동기적으로 얻어야 한다. 여기에는 트레이드오프가 있는 몇가지 옵션이 있다.<ul>\n<li>서비스는 saga가 완료되면 그 결과를 응답한다. (e.g. <code>OrderApproved</code> 또는 <code>OrderRejected</code> 이벤트)</li>\n<li>서비스는 saga를 동작시킨 뒤 <code>orderID</code>를 포함하여 응답한다. 클라이언트는 주기적으로 <code>GET /orders/{orderID}</code>를 요청해 polling 하여 결과를 얻는다.</li>\n<li>서비스는 saga를 동작시킨 뒤 <code>orderID</code>를 포함하여 응답한다. 그리고 saga가 완료되면 웹 소캣 또는 웹 훅 등을 이용해 이벤트를 발행한다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"related-patterns\">Related patterns</h2>\n<ul>\n<li>이 패턴은 <a href=\"https://microservices.io/patterns/data/database-per-service.html\">Database per Service pattern</a>의 필요로 인해 고안됐다.</li>\n<li>아래 패턴 들은 <em>원자적으로</em>  업데이트와 메시지/이벤트를 발행하는 방법이다.<ul>\n<li><a href=\"https://microservices.io/patterns/data/event-sourcing.html\">Event sourcing</a></li>\n<li><a href=\"https://microservices.io/patterns/data/transactional-outbox.html\">Transactional Outbox</a></li>\n</ul>\n</li>\n<li>Choreography 기반 saga는 <a href=\"https://microservices.io/patterns/data/aggregate.html\">Aggregates</a>와 <a href=\"https://microservices.io/patterns/data/domain-event.html\">Domain Events</a>를 사용해 이벤트를 발행한다.</li>\n</ul>\n<h2 id=\"learn-more\">Learn more</h2>\n<ul>\n<li>책 <a href=\"https://microservices.io/book\">Microservices patterns</a>는 이 패턴에 대해 상세히 설명한다. 이 책의 <a href=\"https://github.com/microservice-patterns/ftgo-application\">example application</a>은 <a href=\"https://github.com/eventuate-tram/eventuate-tram-sagas\">Eventuate Tram Sagas framework</a>를 사용한 orchestration 기반의 saga로 구현되어있다.</li>\n<li><a href=\"https://chrisrichardson.net/virtual-bootcamp-distributed-data-management.html\">self-paced, online bootcamp</a>에서 여러 서비스에 걸쳐 saga를 사용하는 방법, API Composition, CQRS 패턴을 배울 수 있다.</li>\n<li>Saga 패턴에 관한 블로그 포스트<ul>\n<li><a href=\"https://chrisrichardson.net/post/antipatterns/2019/07/09/developing-sagas-part-1.html\">overview of sagas</a></li>\n<li><a href=\"https://chrisrichardson.net/post/sagas/2019/08/04/developing-sagas-part-2.html\">saga coordination mechanisms: choreography and orchestration</a></li>\n<li><a href=\"https://chrisrichardson.net/post/sagas/2019/08/15/developing-sagas-part-3.html\">implementing choreography-based sagas</a></li>\n<li><a href=\"https://chrisrichardson.net/post/sagas/2019/12/12/developing-sagas-part-4.html\">implementing orchestration-based sagas</a></li>\n</ul>\n</li>\n<li>Saga와 비동기 마이크로서비스에 대한 <a href=\"https://microservices.io/presentations\">발표들</a></li>\n</ul>\n<h2 id=\"example-code\">Example code</h2>\n<p>아래 예제는 Customer, Order 예제를 각각 다른 방식으로 구현한다.</p>\n<ul>\n<li><a href=\"https://github.com/eventuate-tram/eventuate-tram-core\">Eventuate Tram framework</a>를 사용 한 <a href=\"https://github.com/eventuate-tram/eventuate-tram-examples-customers-and-orders\">Choreography 기반 saga</a></li>\n<li><a href=\"https://github.com/eventuate-tram/eventuate-tram-sagas\">Eventuate Tram Sagas framework</a>를 사용 한 <a href=\"https://github.com/eventuate-tram/eventuate-tram-sagas-examples-customers-and-orders\">Orchestration 기반 saga</a></li>\n<li><a href=\"http://eventuate.io/\">Eventuate event sourcing framework</a>를 사용 한 <a href=\"https://github.com/eventuate-examples/eventuate-examples-java-customers-and-orders\">Choreography와 event sourcing 기반 saga</a></li>\n</ul>\n"}],null],"segment":"__PAGE__?{\"slug\":\"Sagas\"}"},"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e175a87955b7f53c.css","precedence":"next"}]]}],"segment":["slug","Sagas","d"]},"styles":[]}],"segment":"articles"},"styles":[]}]}],["$","footer",null,{"children":["$","span",null,{"children":["Github (",["$","a",null,{"href":"https://github.com/juchanei","children":"@juchanei"}],")"]}]}]]}]}]]}],null]
3:[[["$","meta",null,{"charSet":"utf-8"}],null,null,null,null,null,null,null,null,null,null,["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],null,null,null,null,null,null,null,null,null,null,[]],[null,null,null,null],null,null,[null,null,null,null,null],null,null,null,null,null]

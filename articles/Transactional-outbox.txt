1:HL["/_next/static/css/d32bf43455ded298.css",{"as":"style"}]
0:[[["",{"children":["articles",{"children":[["slug","Transactional-outbox","d"],{"children":["__PAGE__?{\"slug\":\"Transactional-outbox\"}",{}]}]}]},"$undefined","$undefined",true],"$L2",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d32bf43455ded298.css","precedence":"next"}]],["$L3",null]]]]
4:HL["/_next/static/css/e175a87955b7f53c.css",{"as":"style"}]
5:I{"id":"7951","chunks":["414:static/chunks/414-1f2b980871695451.js","185:static/chunks/app/layout-a1437d56a8d70c68.js"],"name":"","async":false}
6:I{"id":"414","chunks":["414:static/chunks/414-1f2b980871695451.js","222:static/chunks/app/articles/page-396ceb5d519c38af.js"],"name":"","async":false}
7:I{"id":"9544","chunks":["272:static/chunks/webpack-df73c3a7ea0771f4.js","667:static/chunks/2443530c-82eff788789df68b.js","139:static/chunks/139-0eb3f6144d0a8a28.js"],"name":"","async":false}
8:I{"id":"99","chunks":["272:static/chunks/webpack-df73c3a7ea0771f4.js","667:static/chunks/2443530c-82eff788789df68b.js","139:static/chunks/139-0eb3f6144d0a8a28.js"],"name":"","async":false}
9:I{"id":"8607","chunks":["943:static/chunks/943-e365b4e8cd375ef4.js","83:static/chunks/app/articles/[slug]/page-4dc4cd3d17050a2d.js"],"name":"","async":false}
2:[["$","html",null,{"lang":"ko","children":[["$","head",null,{"children":[["$","title",null,{"children":"juchanei"}],["$","meta",null,{"name":"description","content":"$undefined"}],["$","meta",null,{"property":"og:site_name","content":"juchanei"}],["$","meta",null,{"property":"og:type","content":"blog"}],["$","meta",null,{"property":"og:title","content":"juchanei"}],["$","meta",null,{"property":"og:image","content":"/logo_transparent.png"}],["$","meta",null,{"property":"og:url","content":"https://juchanei.github.io"}],["$","meta",null,{"property":"og:description","content":"$undefined"}],["$","meta",null,{"property":"og:locale","content":"ko_KR"}],["$","meta",null,{"name":"twitter:card","content":"summary"}],["$","meta",null,{"name":"twitter:title","content":"juchanei"}],["$","meta",null,{"name":"twitter:description","content":"$undefined"}],["$","meta",null,{"name":"twitter:image","content":"/logo_transparent.png"}],["$","meta",null,{"name":"google-site-verification","content":"zMe30NikxkVrHQc8KL1LeFDlYRx13BypWzaXpglLe3Q"}],["$","link",null,{"rel":"stylesheet","href":"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/atom-one-light.min.css"}],["$","link",null,{"rel":"stylesheet","href":"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/atom-one-dark.min.css","media":"screen and (prefers-color-scheme: dark)"}]]}],["$","$L5",null,{"src":"https://www.googletagmanager.com/gtag/js?id=G-JRWY82TBQY","strategy":"afterInteractive"}],["$","$L5",null,{"id":"google-analytics","strategy":"afterInteractive","children":"\n                window.dataLayer = window.dataLayer || [];\n                function gtag(){window.dataLayer.push(arguments);}\n                gtag('js', new Date());\n\n                gtag('config', 'G-JRWY82TBQY');\n                "}],["$","body",null,{"children":["$","main",null,{"className":"Layout_main__maYPe","children":[["$","header",null,{"children":[["$","$L6",null,{"className":"Layout_logo__tEsDc","href":"/","children":"juchanei"}],["$","nav",null,{"children":["$","ul",null,{"children":[["$","li","/about",{"children":["$","$L6",null,{"href":"/about","target":"$undefined","children":"about"}]}],["$","li","/articles",{"children":["$","$L6",null,{"href":"/articles","target":"$undefined","children":"articles"}]}],["$","li","https://github.com/juchanei",{"children":["$","$L6",null,{"href":"https://github.com/juchanei","target":"blank","children":"github"}]}]]}]}]]}],["$","article",null,{"children":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L8",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":"$undefined","childProp":{"current":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","articles","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L8",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":"$undefined","childProp":{"current":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","articles","children",["slug","Transactional-outbox","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L8",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":"$undefined","childProp":{"current":[["$","$L9",null,{"title":"Transactional outbox","date":"$D2022-11-15T12:51:00.000Z","tags":["microservice","transaction","message","event"],"html":"<blockquote>\n<p><a href=\"https://microservices.io/patterns/data/transactional-outbox.html\">https://microservices.io/patterns/data/transactional-outbox.html</a>을 번역한 글입니다.</p>\n</blockquote>\n<h2 id=\"also-known-as\">Also known as</h2>\n<p>Application events</p>\n<h2 id=\"context\">Context</h2>\n<p>전형적인 서비스 커맨드는 데이터베이스를 업데이트 하는 동시에 메시지/이벤트를 발송할 필요가 있다. 예를 들면, <a href=\"https://microservices.io/patterns/data/saga.html\">saga</a>에 참여하는 서비스는 데이터베이스 업데이트와 메시지/이벤트 발행을 원자적으로 수행해야 한다. <a href=\"https://microservices.io/patterns/data/domain-event.html\">도메인 이벤트</a>(domain event)를 발행하는 서비스 역시 <a href=\"https://microservices.io/patterns/data/aggregate.html\">aggregate</a>을 업데이트하고 이벤트를 발행하는 동작을 원자적으로 수행해야 한다.</p>\n<p>서비스 커맨드는 일반적으로 데이터베이스를 업데이트하는 <strong>동시에</strong> 메시지/이벤트를 발송한다. 그러나 메시지 브로커는 보통 전통적인 분산 트랜잭션(Two phase commit, 2PC)를 지원하지 않기 때문에, 데이터베이스와 메시지 브로커에 걸쳐 업데이트와 메시지/이벤트 발행을 원자적으로 수행할 수 없다. 만약 가능하다 하더라도 서비스가 데이터베이스와 메시지에 모두 결합되는 구조는 바람직 하지 않을 수 있다.</p>\n<p>하지만 2PC를 사용하지 않으면, 트랜잭션 중에 메시지가 발송된 것을 확신할 수 없다. 트랜잭션이 커밋 되는 것을 보장할 수 없을 뿐만 아니라, 트랜잭션 커밋 후 메시지 발송 중에 크래시가 발생하지 않는다는 것 또한 보장할 수 없다.</p>\n<p>더불어, 메시지는 반드시 서비스가 발송한 순서대로 메시지 브로커에 도착해야 한다. 예를 들면, 서비스에서 한 aggregate이 트랜잭션 <code>T1</code>, <code>T2</code>에 의해 업데이트 된다고 하자. 두 트랜잭션은  같은 서비스 인스턴스에서 수행될 수도 있고 다른 서비스 인스턴스에서 수행될 수도 있다. 각각 트랜잭션은 대응되는 이벤트 <code>E1</code>, <code>E2</code>가 있다. 이 때 만일 트랜잭션 <code>T1</code> 다음에 <code>T2</code>가 수행된다면, 이벤트 <code>E2</code>는 반드시 <code>E1</code> 다음에 발행되어야 한다.</p>\n<h2 id=\"problem\">Problem</h2>\n<p>어떻게 데이터베이스 업데이트와 메시지/이벤트 발행을 안정적/원자적으로 할 수 있을까?</p>\n<h2 id=\"forces\">Forces</h2>\n<ul>\n<li>2PC는 사용하지 않는다.</li>\n<li>만약 데이터베이스 트랜잭션이 커밋됐다면, 메시지는 반드시 발송되어야 한다. 반대로 데이터베이스가 롤백되었다면, 메시지는 발송되지 않아야 한다.</li>\n<li>메시지는 반드시 서비스가 발송한 순서대로 메시지 브로커에 도착해야 한다. 같은 aggregate을 업데이트하는 다수에 서비스 인스턴스에 걸쳐서 이 순서는 반드시 지켜져야 한다.</li>\n</ul>\n<h2 id=\"solution\">Solution</h2>\n<p>관계형 데이터베이스를 사용하는 서비스는 <em>outbox</em> 테이블(e.g. <code>MESSAGE</code>)에 메시지/이벤트를 로컬 트랜잭션으로 insert 한다. NoSQL 데이터베이스를 사용하는 서비스는 메시지/이벤트를 record(e.g. document 또는 item) attribute를 추가하는 방식으로 업데이트 한다. 별도의 <em>메시지 릴레이</em> 프로세스는 데이터베이스에 추가 된 이벤트를 메시지 브로커로 발행한다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/10704195/201923714-be54b86b-605c-417b-82d1-9a3149289c36.png\" alt=\"image\"></p>\n<h2 id=\"result-context\">Result context</h2>\n<p>이 패턴은 아래와 같은 장점이 있다.</p>\n<ul>\n<li>2PC를 사용하지 않는다.</li>\n<li>데이터베이스 트랜잭션이 커밋된 경우에만 메시지가 발송 되는 것을 보장 한다.</li>\n<li>메시지는 어플리캐이션에 의해 발송된 순서대로 메시지 브로커에 도착한다.</li>\n</ul>\n<p>이 패턴은 아래와 같은 단점이 있다.</p>\n<ul>\n<li>개발자가 데이터베이스 업데이트 후에 메시지/이벤트를 발행하는 것을 잊어버릴 수 있기 때문에 잠재적으로 에러가 발생할 수 있다.</li>\n</ul>\n<p>이 패턴은 또한 아래 이슈가 있다.</p>\n<ul>\n<li>메시지 릴레이는 같은 메시지를 중복해서 발행할 수 있다. 예를 들면, 메시지를 발행한 후 발행 여부를 기록하기 전에 크래시가 일어나, 이를 재실행 하면서 메시지를 다시 발행할 수 있다. 따라서, 메시지 컨슈머는 이미 처리한 동일한 메시지에 대해서 반드시 멱등하게 동작해야 한다. 다행히도 메시지 컨슈머는 보통 멱등하게 동작하므로 (브로커는 메시지를 여러번 보낼 수 있다) 이 것이 문제되지 않는다.</li>\n</ul>\n<h2 id=\"related-patterns\">Related patterns</h2>\n<ul>\n<li><a href=\"https://microservices.io/patterns/data/saga.html\">Saga</a>와 <a href=\"https://microservices.io/patterns/data/domain-event.html\">Domain event</a> 패턴에 이 패턴이 사용된다.</li>\n<li><a href=\"https://microservices.io/patterns/data/event-sourcing.html\">Event sourcing</a>은 이 솔루션의 다른 대안이다.</li>\n<li><em>메시지 릴레이</em>를 구현하는데 아래 두 패턴이 사용된다.<ul>\n<li><a href=\"https://microservices.io/patterns/data/transaction-log-tailing.html\">Transaction log tailing</a> 패턴</li>\n<li><a href=\"https://microservices.io/patterns/data/polling-publisher.html\">Polling publisher</a> 패턴</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"learn-more\">Learn more</h2>\n<ul>\n<li>책 ‘<a href=\"https://microservices.io/book\">Microservices patterns</a>’에 더 자세한 설명이 있다.</li>\n<li><a href=\"https://github.com/eventuate-tram/eventuate-tram-core\">Eventuate Tram framework</a>는 이 패턴의 구현체이다.</li>\n</ul>\n"}],null],"segment":"__PAGE__?{\"slug\":\"Transactional-outbox\"}"},"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e175a87955b7f53c.css","precedence":"next"}]]}],"segment":["slug","Transactional-outbox","d"]},"styles":[]}],"segment":"articles"},"styles":[]}]}],["$","footer",null,{"children":["$","span",null,{"children":["Github (",["$","a",null,{"href":"https://github.com/juchanei","children":"@juchanei"}],")"]}]}]]}]}]]}],null]
3:[[["$","meta",null,{"charSet":"utf-8"}],null,null,null,null,null,null,null,null,null,null,["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],null,null,null,null,null,null,null,null,null,null,[]],[null,null,null,null],null,null,[null,null,null,null,null],null,null,null,null,null]
